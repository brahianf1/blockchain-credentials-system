#!/usr/bin/env python3
"""
Test espec√≠fico para metadatos OpenID4VC compatible con walt.id
Verifica que el formato sea exactamente el esperado por walt.id wallet
"""

import json
import requests
from typing import Dict, Any

# Configuraci√≥n
ISSUER_URL = "https://utnpf.site"
METADATA_URL = f"{ISSUER_URL}/oid4vc/.well-known/openid-credential-issuer"

def test_metadata_format():
    """Verifica el formato de metadatos compatible con walt.id"""
    
    print("üîç === TEST METADATOS OPENID4VC PARA WALT.ID ===")
    print(f"URL: {METADATA_URL}")
    print()
    
    try:
        response = requests.get(METADATA_URL, timeout=10)
        
        if response.status_code != 200:
            print(f"‚ùå Error HTTP {response.status_code}: {response.text}")
            return False
            
        metadata = response.json()
        print("‚úÖ Metadatos obtenidos exitosamente")
        
        # Campos requeridos por OpenID4VC
        required_fields = [
            "credential_issuer",
            "credential_endpoint", 
            "credential_configurations_supported"
        ]
        
        for field in required_fields:
            if field not in metadata:
                print(f"‚ùå Campo requerido faltante: {field}")
                return False
            print(f"‚úÖ Campo {field}: presente")
        
        # Verificar credential_configurations_supported
        configs = metadata.get("credential_configurations_supported", {})
        if "UniversityCredential" not in configs:
            print("‚ùå UniversityCredential no encontrada en configuraciones")
            return False
        
        university_config = configs["UniversityCredential"]
        print("‚úÖ UniversityCredential encontrada")
        
        # Verificar campos espec√≠ficos de UniversityCredential
        required_config_fields = [
            "format",
            "credential_definition", 
            "proof_types_supported"
        ]
        
        for field in required_config_fields:
            if field not in university_config:
                print(f"‚ùå Campo requerido en UniversityCredential: {field}")
                return False
            print(f"‚úÖ UniversityCredential.{field}: presente")
        
        # Verificar proof_types_supported (CR√çTICO para walt.id)
        proof_types = university_config.get("proof_types_supported", {})
        if not isinstance(proof_types, dict):
            print(f"‚ùå proof_types_supported debe ser un objeto, es: {type(proof_types)}")
            return False
        print("‚úÖ proof_types_supported es un objeto (correcto para walt.id)")
        
        if "jwt" not in proof_types:
            print("‚ùå proof_types_supported debe contener 'jwt'")
            return False
        print("‚úÖ proof_types_supported contiene 'jwt'")
        
        jwt_proof = proof_types["jwt"]
        if not isinstance(jwt_proof, dict):
            print(f"‚ùå proof_types_supported.jwt debe ser un objeto, es: {type(jwt_proof)}")
            return False
        print("‚úÖ proof_types_supported.jwt es un objeto")
        
        # Verificar credential_definition
        cred_def = university_config.get("credential_definition", {})
        if "type" not in cred_def:
            print("‚ùå credential_definition debe contener 'type'")
            return False
        print("‚úÖ credential_definition contiene 'type'")
        
        cred_types = cred_def["type"]
        expected_types = ["VerifiableCredential", "UniversityCredential"]
        if cred_types != expected_types:
            print(f"‚ùå credential_definition.type incorrecto: {cred_types}")
            print(f"   Esperado: {expected_types}")
            return False
        print("‚úÖ credential_definition.type correcto")
        
        # Mostrar estructura completa
        print("\nüìã Estructura de metadatos:")
        print(json.dumps(metadata, indent=2))
        
        print("\nüéâ ¬°METADATOS COMPATIBLES CON WALT.ID!")
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    except json.JSONDecodeError as e:
        print(f"‚ùå Error decodificando JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def test_token_endpoint():
    """Verifica que el token endpoint est√© accesible"""
    
    print("\nüîß === TEST TOKEN ENDPOINT ===")
    
    token_url = f"{ISSUER_URL}/oid4vc/token"
    print(f"URL: {token_url}")
    
    # Solo verificamos que est√© accesible (esperamos 422 por falta de par√°metros)
    try:
        response = requests.post(token_url, timeout=10)
        
        if response.status_code == 422:
            print("‚úÖ Token endpoint accesible (422 es esperado sin par√°metros)")
            return True
        elif response.status_code == 405:
            print("‚úÖ Token endpoint accesible (405 Method Not Allowed es aceptable)")
            return True
        else:
            print(f"‚ö†Ô∏è  Token endpoint responde con {response.status_code}")
            return True  # No es cr√≠tico para este test
            
    except Exception as e:
        print(f"‚ùå Error verificando token endpoint: {e}")
        return False

def test_credential_endpoint():
    """Verifica que el credential endpoint est√© accesible"""
    
    print("\nüîß === TEST CREDENTIAL ENDPOINT ===")
    
    cred_url = f"{ISSUER_URL}/oid4vc/credential"
    print(f"URL: {cred_url}")
    
    try:
        response = requests.post(cred_url, timeout=10)
        
        if response.status_code in [401, 422, 400]:
            print(f"‚úÖ Credential endpoint accesible ({response.status_code} es esperado sin auth)")
            return True
        else:
            print(f"‚ö†Ô∏è  Credential endpoint responde con {response.status_code}")
            return True  # No es cr√≠tico para este test
            
    except Exception as e:
        print(f"‚ùå Error verificando credential endpoint: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando test de compatibilidad walt.id para metadatos...\n")
    
    # Ejecutar tests
    metadata_ok = test_metadata_format()
    token_ok = test_token_endpoint() 
    cred_ok = test_credential_endpoint()
    
    print("\n" + "="*60)
    print("üìä RESUMEN DE RESULTADOS:")
    print(f"   Metadatos: {'‚úÖ CORRECTO' if metadata_ok else '‚ùå FALLO'}")
    print(f"   Token Endpoint: {'‚úÖ CORRECTO' if token_ok else '‚ùå FALLO'}")
    print(f"   Credential Endpoint: {'‚úÖ CORRECTO' if cred_ok else '‚ùå FALLO'}")
    
    if metadata_ok and token_ok and cred_ok:
        print("\nüéâ ¬°METADATOS TOTALMENTE COMPATIBLES CON WALT.ID!")
        print("üìã Los metadatos ya no deber√≠an dar el error JsonDecodingException")
        print("üîó Puedes probar de nuevo en: https://wallet.demo.walt.id/")
    else:
        print("\n‚ùå Se encontraron problemas en los metadatos")
    
    print("="*60)
